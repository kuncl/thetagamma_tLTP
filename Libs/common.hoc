begintemplate Lib
	public true, false, nil
	public string, cmd
	strdef string, cmd
	objref nil
	
	proc init() {
		true = 1
		false =0 
		
	}
	
	public mkdir
	proc mkdir() { local exs localobj s, tf
		tf = new File()
		exs = tf.ropen($s1)
		
			if (exs== false) {
				s= new String()
				sprint(s.s, "system(\"mkdir -p %s\")", $s1)
				execute(s.s)	
			}
		
		
	}
	
	public unlink
	proc unlink() { local exs localobj s, tf
		tf = new File()
		exs = tf.ropen($s1)
		if (exs== true) {
			tf.unlink()
		}
		tf.close()		
	}
	public floor		
	func floor() { localobj v
		v = new Vector()
		v.append($1)
		v.floor()
		return v.x(0)
	}
	public round
	func round() { localobj v
		v = new Vector()
		v.append($1+0.5)
		v.floor()
		return v.x(0)
	}	
	public printjpg
	strdef printjpg_comm, printjpg_src, printjpg_gs
	proc printjpg() { local exs localobj g, nil,  tf
		print g = $o1
		printjpg_src = $s2
		if (g== nil) {
			print "ERR)No Object"
			break
		} 

		// EPS ï¿½ï¿½ï¿?
		sprint(printjpg_comm, "%s.eps", printjpg_src)	
		g.printfile(printjpg_comm)
		
		// GhostScript --> JPG ï¿½ï¿½È¯
		sprint(printjpg_gs, "C:/Program Files/gs/gs9.07/bin/")		
		sprint(printjpg_comm, "system(\"./Libs/gs/gswin64c.exe -sDEVICE=jpeg -dJPEGQ=100 -dNOPAUSE -q -dBATCH -dSAFER -dEPSCrop -r300 -sOutputFile=%s.jpg %s.eps\")", printjpg_src, printjpg_src)
		execute(printjpg_comm)
		
		sprint(printjpg_comm, "system(\"rm %s.eps\")", printjpg_src)
		execute(printjpg_comm)
	}

	/*
	Fits y = mx + b to data by linear regression.
	Expects x and y data in Vectors, returns m and b. 
	$o1  x data
	$o2  y data
	$&3  m
	$&4  b
	*/
	public rline
	func rline() {
	  return m*$1 + b
	}

	public linfit
	proc linfit() { local num, xmean, ymean, sxy, s1sq  localobj xvec, yvec
	  num = $o1.size()
	  if ($o1.size() < 2) {
		print "Data must contain two or more points."
		quit()
	  }

	  xmean = $o1.mean
	  ymean = $o2.mean

	  xvec = $o1.c.sub(xmean)
	  yvec = $o2.c.sub(ymean)

	  sxy = xvec.c.mul(yvec).sum/(num-1)
	  s1sq = xvec.sumsq()/(num-1)

	  $&3 = sxy/s1sq
		$&4 = -$&3*xmean + ymean
}
endtemplate Lib

objref lib
lib = new Lib()
true = 1
false = 0

objref nil
strdef string, cmd



proc mkdir() { local exs localobj s, tf
	tf = new File()
	exs = tf.ropen($s1)
	if (exs== false) {
		s= new String()
		sprint(s.s, "system(\"mkdir -p %s\")", $s1)
		execute(s.s)	
	}
}

func floor() { localobj v
	v = new Vector()
	v.append($1)
	v.floor()
	return v.x(0)
}

func myHistogram_find() { local i, fL, fR, cnt localobj v
	v = $o1
	fL = $2
	fR = $3
	cnt = 0
	for (i =0; i<v.size(); i= i+1) {
		if (v.x(i) >= fL && v.x(i) < fR) {
			cnt = cnt+1
		}
	}
	return cnt
}

// Units Define
unit_m = 1e-3
unit_u = 1e-6
unit_n = 1e-9
unit_p = 1e-12


strdef printjpg_comm, printjpg_src, printjpg_gs
proc printjpg() { local exs localobj g, nil,  tf
	print g = $o1
	printjpg_src = $s2
	if (g== nil) {
		print "ERR)No Object"
		break
	} 

	// EPS ï¿½ï¿½ï¿?
	sprint(printjpg_comm, "%s.eps", printjpg_src)	
	g.printfile(printjpg_comm)
	
	// GhostScript --> JPG ï¿½ï¿½È¯
	sprint(printjpg_gs, "C:/Program Files/gs/gs9.07/bin/")		
	sprint(printjpg_comm, "system(\"./Libs/gs/gswin64c.exe -sDEVICE=jpeg -dJPEGQ=100 -dNOPAUSE -q -dBATCH -dSAFER -dEPSCrop -r300 -sOutputFile=%s.jpg %s.eps\")", printjpg_src, printjpg_src)
	execute(printjpg_comm)
	
	sprint(printjpg_comm, "system(\"rm %s.eps\")", printjpg_src)
	execute(printjpg_comm)
}

/*
Fits y = mx + b to data by linear regression.
Expects x and y data in Vectors, returns m and b. 
$o1  x data
$o2  y data
$&3  m
$&4  b
*/
func rline() {
  return m*$1 + b
}

proc linfit() { local num, xmean, ymean, sxy, s1sq  localobj xvec, yvec
  num = $o1.size()
  if ($o1.size() < 2) {
    print "Data must contain two or more points."
    quit()
  }

  xmean = $o1.mean
  ymean = $o2.mean

  xvec = $o1.c.sub(xmean)
  yvec = $o2.c.sub(ymean)

  sxy = xvec.c.mul(yvec).sum/(num-1)
  s1sq = xvec.sumsq()/(num-1)

  $&3 = sxy/s1sq
  $&4 = -$&3*xmean + ymean
}

{load_file("objDictionary.hoc")}
{load_file("oMyString.hoc")}
{load_file("graphLib.hoc")}
{load_file("LocCode.hoc")}
{load_file("RandomStream.hoc")}

obfunc myHistogram() { local i, histoLow, histoHigh, histoBin, cnt localobj v, vy, vx, v3, g // $o1 vec , $2 low, $3 high, $4 bin
	
	v = $o1	
	histoLow = $2
	histoHigh = $3
	histoBin = $4
	histoMax = $5
	
	
	vx = new Vector((histoHigh - histoLow) / histoBin)
	vx.indgen(histoBin)
	vx.add(histoBin /2)
	vy = new Vector() 
	
	g = new MyGraph()
	g.size(histoLow, histoHigh, 0, histoMax) 
	for (i=histoLow; i<histoHigh; i= i+histoBin) {
		cnt = myHistogram_find(v, i, i+histoBin)
		vy.append(cnt)
		g.g.beginline 
			g.g.line(i, 0)
			g.g.line(i, cnt)
			g.g.line(i+histoBin, cnt)
			g.g.line(i+histoBin, 0)
		g.g.flush()
	}
	return g
	// g.mark(histoLow, histoHigh, 0, histoMax) 
	// vy.mark(g, vx , "O", 3, 1, 3)
}